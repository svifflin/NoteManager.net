//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoteManagerUI.NoteManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoteData", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
    [System.SerializableAttribute()]
    public partial class NoteData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateModificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int noteIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreation {
            get {
                return this.DateCreationField;
            }
            set {
                if ((this.DateCreationField.Equals(value) != true)) {
                    this.DateCreationField = value;
                    this.RaisePropertyChanged("DateCreation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModification {
            get {
                return this.DateModificationField;
            }
            set {
                if ((this.DateModificationField.Equals(value) != true)) {
                    this.DateModificationField = value;
                    this.RaisePropertyChanged("DateModification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int noteID {
            get {
                return this.noteIDField;
            }
            set {
                if ((this.noteIDField.Equals(value) != true)) {
                    this.noteIDField = value;
                    this.RaisePropertyChanged("noteID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
    [System.SerializableAttribute()]
    public partial class SystemFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemOperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemMessage {
            get {
                return this.SystemMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemMessageField, value) != true)) {
                    this.SystemMessageField = value;
                    this.RaisePropertyChanged("SystemMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemOperation {
            get {
                return this.SystemOperationField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemOperationField, value) != true)) {
                    this.SystemOperationField = value;
                    this.RaisePropertyChanged("SystemOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemReason {
            get {
                return this.SystemReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemReasonField, value) != true)) {
                    this.SystemReasonField = value;
                    this.RaisePropertyChanged("SystemReason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
    [System.SerializableAttribute()]
    public partial class DatabaseFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DbMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DbOperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DbReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbMessage {
            get {
                return this.DbMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.DbMessageField, value) != true)) {
                    this.DbMessageField = value;
                    this.RaisePropertyChanged("DbMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbOperation {
            get {
                return this.DbOperationField;
            }
            set {
                if ((object.ReferenceEquals(this.DbOperationField, value) != true)) {
                    this.DbOperationField = value;
                    this.RaisePropertyChanged("DbOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DbReason {
            get {
                return this.DbReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.DbReasonField, value) != true)) {
                    this.DbReasonField = value;
                    this.RaisePropertyChanged("DbReason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserData", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
    [System.SerializableAttribute()]
    public partial class UserData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoteManagerService.NoteManagerService")]
    public interface NoteManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/NotesListByUserID", ReplyAction="http://tempuri.org/NoteManagerService/NotesListByUserIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/NotesListByUserIDSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/NotesListByUserIDDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> NotesListByUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/NotesListByUserID", ReplyAction="http://tempuri.org/NoteManagerService/NotesListByUserIDResponse")]
        System.IAsyncResult BeginNotesListByUserID(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> EndNotesListByUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/NotesListByFilter", ReplyAction="http://tempuri.org/NoteManagerService/NotesListByFilterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/NotesListByFilterDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/NotesListByFilterSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> NotesListByFilter(string filter, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/NotesListByFilter", ReplyAction="http://tempuri.org/NoteManagerService/NotesListByFilterResponse")]
        System.IAsyncResult BeginNotesListByFilter(string filter, int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> EndNotesListByFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/GetNote", ReplyAction="http://tempuri.org/NoteManagerService/GetNoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/GetNoteSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/GetNoteDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        NoteManagerUI.NoteManagerService.NoteData GetNote(int noteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/GetNote", ReplyAction="http://tempuri.org/NoteManagerService/GetNoteResponse")]
        System.IAsyncResult BeginGetNote(int noteID, System.AsyncCallback callback, object asyncState);
        
        NoteManagerUI.NoteManagerService.NoteData EndGetNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/AddNote", ReplyAction="http://tempuri.org/NoteManagerService/AddNoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/AddNoteDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/AddNoteSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        int AddNote(NoteManagerUI.NoteManagerService.NoteData noteData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/AddNote", ReplyAction="http://tempuri.org/NoteManagerService/AddNoteResponse")]
        System.IAsyncResult BeginAddNote(NoteManagerUI.NoteManagerService.NoteData noteData, System.AsyncCallback callback, object asyncState);
        
        int EndAddNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/RemoveNote", ReplyAction="http://tempuri.org/NoteManagerService/RemoveNoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/RemoveNoteSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/RemoveNoteDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        bool RemoveNote(int noteID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/RemoveNote", ReplyAction="http://tempuri.org/NoteManagerService/RemoveNoteResponse")]
        System.IAsyncResult BeginRemoveNote(int noteID, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/UpdateNote", ReplyAction="http://tempuri.org/NoteManagerService/UpdateNoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/UpdateNoteSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/UpdateNoteDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        NoteManagerUI.NoteManagerService.NoteData UpdateNote(NoteManagerUI.NoteManagerService.NoteData noteData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/UpdateNote", ReplyAction="http://tempuri.org/NoteManagerService/UpdateNoteResponse")]
        System.IAsyncResult BeginUpdateNote(NoteManagerUI.NoteManagerService.NoteData noteData, System.AsyncCallback callback, object asyncState);
        
        NoteManagerUI.NoteManagerService.NoteData EndUpdateNote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/GetUser", ReplyAction="http://tempuri.org/NoteManagerService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/GetUserSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/GetUserDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        NoteManagerUI.NoteManagerService.UserData GetUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/GetUser", ReplyAction="http://tempuri.org/NoteManagerService/GetUserResponse")]
        System.IAsyncResult BeginGetUser(int userID, System.AsyncCallback callback, object asyncState);
        
        NoteManagerUI.NoteManagerService.UserData EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/GetUserByEmail", ReplyAction="http://tempuri.org/NoteManagerService/GetUserByEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/GetUserByEmailSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/GetUserByEmailDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        NoteManagerUI.NoteManagerService.UserData GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/GetUserByEmail", ReplyAction="http://tempuri.org/NoteManagerService/GetUserByEmailResponse")]
        System.IAsyncResult BeginGetUserByEmail(string email, System.AsyncCallback callback, object asyncState);
        
        NoteManagerUI.NoteManagerService.UserData EndGetUserByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/AddUser", ReplyAction="http://tempuri.org/NoteManagerService/AddUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/AddUserSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/AddUserDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        int AddUser(NoteManagerUI.NoteManagerService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/AddUser", ReplyAction="http://tempuri.org/NoteManagerService/AddUserResponse")]
        System.IAsyncResult BeginAddUser(NoteManagerUI.NoteManagerService.UserData userData, System.AsyncCallback callback, object asyncState);
        
        int EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/RemoveUser", ReplyAction="http://tempuri.org/NoteManagerService/RemoveUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/RemoveUserDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/RemoveUserSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        bool RemoveUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/RemoveUser", ReplyAction="http://tempuri.org/NoteManagerService/RemoveUserResponse")]
        System.IAsyncResult BeginRemoveUser(int userID, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/UpdateUser", ReplyAction="http://tempuri.org/NoteManagerService/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/UpdateUserDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/UpdateUserSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        NoteManagerUI.NoteManagerService.UserData UpdateUser(NoteManagerUI.NoteManagerService.UserData user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/UpdateUser", ReplyAction="http://tempuri.org/NoteManagerService/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(NoteManagerUI.NoteManagerService.UserData user, System.AsyncCallback callback, object asyncState);
        
        NoteManagerUI.NoteManagerService.UserData EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/Test", ReplyAction="http://tempuri.org/NoteManagerService/TestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/TestDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/TestSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        string Test();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/Test", ReplyAction="http://tempuri.org/NoteManagerService/TestResponse")]
        System.IAsyncResult BeginTest(System.AsyncCallback callback, object asyncState);
        
        string EndTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NoteManagerService/Login", ReplyAction="http://tempuri.org/NoteManagerService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.DatabaseFault), Action="http://tempuri.org/NoteManagerService/LoginDatabaseFaultFault", Name="DatabaseFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        [System.ServiceModel.FaultContractAttribute(typeof(NoteManagerUI.NoteManagerService.SystemFault), Action="http://tempuri.org/NoteManagerService/LoginSystemFaultFault", Name="SystemFault", Namespace="http://schemas.datacontract.org/2004/07/NoteManagerObjectModel")]
        bool Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NoteManagerService/Login", ReplyAction="http://tempuri.org/NoteManagerService/LoginResponse")]
        System.IAsyncResult BeginLogin(string email, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NoteManagerServiceChannel : NoteManagerUI.NoteManagerService.NoteManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotesListByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotesListByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotesListByFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NotesListByFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NoteManagerUI.NoteManagerService.NoteData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NoteManagerUI.NoteManagerService.NoteData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NoteManagerUI.NoteManagerService.NoteData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NoteManagerUI.NoteManagerService.NoteData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NoteManagerUI.NoteManagerService.UserData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NoteManagerUI.NoteManagerService.UserData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NoteManagerUI.NoteManagerService.UserData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NoteManagerUI.NoteManagerService.UserData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NoteManagerUI.NoteManagerService.UserData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NoteManagerUI.NoteManagerService.UserData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteManagerServiceClient : System.ServiceModel.ClientBase<NoteManagerUI.NoteManagerService.NoteManagerService>, NoteManagerUI.NoteManagerService.NoteManagerService {
        
        private BeginOperationDelegate onBeginNotesListByUserIDDelegate;
        
        private EndOperationDelegate onEndNotesListByUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onNotesListByUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotesListByFilterDelegate;
        
        private EndOperationDelegate onEndNotesListByFilterDelegate;
        
        private System.Threading.SendOrPostCallback onNotesListByFilterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNoteDelegate;
        
        private EndOperationDelegate onEndGetNoteDelegate;
        
        private System.Threading.SendOrPostCallback onGetNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddNoteDelegate;
        
        private EndOperationDelegate onEndAddNoteDelegate;
        
        private System.Threading.SendOrPostCallback onAddNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveNoteDelegate;
        
        private EndOperationDelegate onEndRemoveNoteDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateNoteDelegate;
        
        private EndOperationDelegate onEndUpdateNoteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateNoteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByEmailDelegate;
        
        private EndOperationDelegate onEndGetUserByEmailDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserDelegate;
        
        private EndOperationDelegate onEndRemoveUserDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        public NoteManagerServiceClient() {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<NotesListByUserIDCompletedEventArgs> NotesListByUserIDCompleted;
        
        public event System.EventHandler<NotesListByFilterCompletedEventArgs> NotesListByFilterCompleted;
        
        public event System.EventHandler<GetNoteCompletedEventArgs> GetNoteCompleted;
        
        public event System.EventHandler<AddNoteCompletedEventArgs> AddNoteCompleted;
        
        public event System.EventHandler<RemoveNoteCompletedEventArgs> RemoveNoteCompleted;
        
        public event System.EventHandler<UpdateNoteCompletedEventArgs> UpdateNoteCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<GetUserByEmailCompletedEventArgs> GetUserByEmailCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<RemoveUserCompletedEventArgs> RemoveUserCompleted;
        
        public event System.EventHandler<UpdateUserCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> NotesListByUserID(int userID) {
            return base.Channel.NotesListByUserID(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginNotesListByUserID(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotesListByUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> EndNotesListByUserID(System.IAsyncResult result) {
            return base.Channel.EndNotesListByUserID(result);
        }
        
        private System.IAsyncResult OnBeginNotesListByUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginNotesListByUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndNotesListByUserID(System.IAsyncResult result) {
            System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> retVal = this.EndNotesListByUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNotesListByUserIDCompleted(object state) {
            if ((this.NotesListByUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotesListByUserIDCompleted(this, new NotesListByUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotesListByUserIDAsync(int userID) {
            this.NotesListByUserIDAsync(userID, null);
        }
        
        public void NotesListByUserIDAsync(int userID, object userState) {
            if ((this.onBeginNotesListByUserIDDelegate == null)) {
                this.onBeginNotesListByUserIDDelegate = new BeginOperationDelegate(this.OnBeginNotesListByUserID);
            }
            if ((this.onEndNotesListByUserIDDelegate == null)) {
                this.onEndNotesListByUserIDDelegate = new EndOperationDelegate(this.OnEndNotesListByUserID);
            }
            if ((this.onNotesListByUserIDCompletedDelegate == null)) {
                this.onNotesListByUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotesListByUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginNotesListByUserIDDelegate, new object[] {
                        userID}, this.onEndNotesListByUserIDDelegate, this.onNotesListByUserIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> NotesListByFilter(string filter, int userID) {
            return base.Channel.NotesListByFilter(filter, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginNotesListByFilter(string filter, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotesListByFilter(filter, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> EndNotesListByFilter(System.IAsyncResult result) {
            return base.Channel.EndNotesListByFilter(result);
        }
        
        private System.IAsyncResult OnBeginNotesListByFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filter = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginNotesListByFilter(filter, userID, callback, asyncState);
        }
        
        private object[] OnEndNotesListByFilter(System.IAsyncResult result) {
            System.Collections.Generic.List<NoteManagerUI.NoteManagerService.NoteData> retVal = this.EndNotesListByFilter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNotesListByFilterCompleted(object state) {
            if ((this.NotesListByFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotesListByFilterCompleted(this, new NotesListByFilterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotesListByFilterAsync(string filter, int userID) {
            this.NotesListByFilterAsync(filter, userID, null);
        }
        
        public void NotesListByFilterAsync(string filter, int userID, object userState) {
            if ((this.onBeginNotesListByFilterDelegate == null)) {
                this.onBeginNotesListByFilterDelegate = new BeginOperationDelegate(this.OnBeginNotesListByFilter);
            }
            if ((this.onEndNotesListByFilterDelegate == null)) {
                this.onEndNotesListByFilterDelegate = new EndOperationDelegate(this.OnEndNotesListByFilter);
            }
            if ((this.onNotesListByFilterCompletedDelegate == null)) {
                this.onNotesListByFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotesListByFilterCompleted);
            }
            base.InvokeAsync(this.onBeginNotesListByFilterDelegate, new object[] {
                        filter,
                        userID}, this.onEndNotesListByFilterDelegate, this.onNotesListByFilterCompletedDelegate, userState);
        }
        
        public NoteManagerUI.NoteManagerService.NoteData GetNote(int noteID) {
            return base.Channel.GetNote(noteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNote(int noteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNote(noteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NoteManagerUI.NoteManagerService.NoteData EndGetNote(System.IAsyncResult result) {
            return base.Channel.EndGetNote(result);
        }
        
        private System.IAsyncResult OnBeginGetNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            return this.BeginGetNote(noteID, callback, asyncState);
        }
        
        private object[] OnEndGetNote(System.IAsyncResult result) {
            NoteManagerUI.NoteManagerService.NoteData retVal = this.EndGetNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNoteCompleted(object state) {
            if ((this.GetNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNoteCompleted(this, new GetNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNoteAsync(int noteID) {
            this.GetNoteAsync(noteID, null);
        }
        
        public void GetNoteAsync(int noteID, object userState) {
            if ((this.onBeginGetNoteDelegate == null)) {
                this.onBeginGetNoteDelegate = new BeginOperationDelegate(this.OnBeginGetNote);
            }
            if ((this.onEndGetNoteDelegate == null)) {
                this.onEndGetNoteDelegate = new EndOperationDelegate(this.OnEndGetNote);
            }
            if ((this.onGetNoteCompletedDelegate == null)) {
                this.onGetNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNoteCompleted);
            }
            base.InvokeAsync(this.onBeginGetNoteDelegate, new object[] {
                        noteID}, this.onEndGetNoteDelegate, this.onGetNoteCompletedDelegate, userState);
        }
        
        public int AddNote(NoteManagerUI.NoteManagerService.NoteData noteData) {
            return base.Channel.AddNote(noteData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddNote(NoteManagerUI.NoteManagerService.NoteData noteData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddNote(noteData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddNote(System.IAsyncResult result) {
            return base.Channel.EndAddNote(result);
        }
        
        private System.IAsyncResult OnBeginAddNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NoteManagerUI.NoteManagerService.NoteData noteData = ((NoteManagerUI.NoteManagerService.NoteData)(inValues[0]));
            return this.BeginAddNote(noteData, callback, asyncState);
        }
        
        private object[] OnEndAddNote(System.IAsyncResult result) {
            int retVal = this.EndAddNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddNoteCompleted(object state) {
            if ((this.AddNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddNoteCompleted(this, new AddNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddNoteAsync(NoteManagerUI.NoteManagerService.NoteData noteData) {
            this.AddNoteAsync(noteData, null);
        }
        
        public void AddNoteAsync(NoteManagerUI.NoteManagerService.NoteData noteData, object userState) {
            if ((this.onBeginAddNoteDelegate == null)) {
                this.onBeginAddNoteDelegate = new BeginOperationDelegate(this.OnBeginAddNote);
            }
            if ((this.onEndAddNoteDelegate == null)) {
                this.onEndAddNoteDelegate = new EndOperationDelegate(this.OnEndAddNote);
            }
            if ((this.onAddNoteCompletedDelegate == null)) {
                this.onAddNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNoteCompleted);
            }
            base.InvokeAsync(this.onBeginAddNoteDelegate, new object[] {
                        noteData}, this.onEndAddNoteDelegate, this.onAddNoteCompletedDelegate, userState);
        }
        
        public bool RemoveNote(int noteID) {
            return base.Channel.RemoveNote(noteID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveNote(int noteID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveNote(noteID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRemoveNote(System.IAsyncResult result) {
            return base.Channel.EndRemoveNote(result);
        }
        
        private System.IAsyncResult OnBeginRemoveNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int noteID = ((int)(inValues[0]));
            return this.BeginRemoveNote(noteID, callback, asyncState);
        }
        
        private object[] OnEndRemoveNote(System.IAsyncResult result) {
            bool retVal = this.EndRemoveNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveNoteCompleted(object state) {
            if ((this.RemoveNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveNoteCompleted(this, new RemoveNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveNoteAsync(int noteID) {
            this.RemoveNoteAsync(noteID, null);
        }
        
        public void RemoveNoteAsync(int noteID, object userState) {
            if ((this.onBeginRemoveNoteDelegate == null)) {
                this.onBeginRemoveNoteDelegate = new BeginOperationDelegate(this.OnBeginRemoveNote);
            }
            if ((this.onEndRemoveNoteDelegate == null)) {
                this.onEndRemoveNoteDelegate = new EndOperationDelegate(this.OnEndRemoveNote);
            }
            if ((this.onRemoveNoteCompletedDelegate == null)) {
                this.onRemoveNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveNoteCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveNoteDelegate, new object[] {
                        noteID}, this.onEndRemoveNoteDelegate, this.onRemoveNoteCompletedDelegate, userState);
        }
        
        public NoteManagerUI.NoteManagerService.NoteData UpdateNote(NoteManagerUI.NoteManagerService.NoteData noteData) {
            return base.Channel.UpdateNote(noteData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateNote(NoteManagerUI.NoteManagerService.NoteData noteData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateNote(noteData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NoteManagerUI.NoteManagerService.NoteData EndUpdateNote(System.IAsyncResult result) {
            return base.Channel.EndUpdateNote(result);
        }
        
        private System.IAsyncResult OnBeginUpdateNote(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NoteManagerUI.NoteManagerService.NoteData noteData = ((NoteManagerUI.NoteManagerService.NoteData)(inValues[0]));
            return this.BeginUpdateNote(noteData, callback, asyncState);
        }
        
        private object[] OnEndUpdateNote(System.IAsyncResult result) {
            NoteManagerUI.NoteManagerService.NoteData retVal = this.EndUpdateNote(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateNoteCompleted(object state) {
            if ((this.UpdateNoteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateNoteCompleted(this, new UpdateNoteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateNoteAsync(NoteManagerUI.NoteManagerService.NoteData noteData) {
            this.UpdateNoteAsync(noteData, null);
        }
        
        public void UpdateNoteAsync(NoteManagerUI.NoteManagerService.NoteData noteData, object userState) {
            if ((this.onBeginUpdateNoteDelegate == null)) {
                this.onBeginUpdateNoteDelegate = new BeginOperationDelegate(this.OnBeginUpdateNote);
            }
            if ((this.onEndUpdateNoteDelegate == null)) {
                this.onEndUpdateNoteDelegate = new EndOperationDelegate(this.OnEndUpdateNote);
            }
            if ((this.onUpdateNoteCompletedDelegate == null)) {
                this.onUpdateNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateNoteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateNoteDelegate, new object[] {
                        noteData}, this.onEndUpdateNoteDelegate, this.onUpdateNoteCompletedDelegate, userState);
        }
        
        public NoteManagerUI.NoteManagerService.UserData GetUser(int userID) {
            return base.Channel.GetUser(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NoteManagerUI.NoteManagerService.UserData EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetUser(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            NoteManagerUI.NoteManagerService.UserData retVal = this.EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(int userID) {
            this.GetUserAsync(userID, null);
        }
        
        public void GetUserAsync(int userID, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        userID}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        public NoteManagerUI.NoteManagerService.UserData GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserByEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserByEmail(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NoteManagerUI.NoteManagerService.UserData EndGetUserByEmail(System.IAsyncResult result) {
            return base.Channel.EndGetUserByEmail(result);
        }
        
        private System.IAsyncResult OnBeginGetUserByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return this.BeginGetUserByEmail(email, callback, asyncState);
        }
        
        private object[] OnEndGetUserByEmail(System.IAsyncResult result) {
            NoteManagerUI.NoteManagerService.UserData retVal = this.EndGetUserByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByEmailCompleted(object state) {
            if ((this.GetUserByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByEmailCompleted(this, new GetUserByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByEmailAsync(string email) {
            this.GetUserByEmailAsync(email, null);
        }
        
        public void GetUserByEmailAsync(string email, object userState) {
            if ((this.onBeginGetUserByEmailDelegate == null)) {
                this.onBeginGetUserByEmailDelegate = new BeginOperationDelegate(this.OnBeginGetUserByEmail);
            }
            if ((this.onEndGetUserByEmailDelegate == null)) {
                this.onEndGetUserByEmailDelegate = new EndOperationDelegate(this.OnEndGetUserByEmail);
            }
            if ((this.onGetUserByEmailCompletedDelegate == null)) {
                this.onGetUserByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByEmailCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByEmailDelegate, new object[] {
                        email}, this.onEndGetUserByEmailDelegate, this.onGetUserByEmailCompletedDelegate, userState);
        }
        
        public int AddUser(NoteManagerUI.NoteManagerService.UserData userData) {
            return base.Channel.AddUser(userData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUser(NoteManagerUI.NoteManagerService.UserData userData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(userData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NoteManagerUI.NoteManagerService.UserData userData = ((NoteManagerUI.NoteManagerService.UserData)(inValues[0]));
            return this.BeginAddUser(userData, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            int retVal = this.EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(NoteManagerUI.NoteManagerService.UserData userData) {
            this.AddUserAsync(userData, null);
        }
        
        public void AddUserAsync(NoteManagerUI.NoteManagerService.UserData userData, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        userData}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        public bool RemoveUser(int userID) {
            return base.Channel.RemoveUser(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRemoveUser(System.IAsyncResult result) {
            return base.Channel.EndRemoveUser(result);
        }
        
        private System.IAsyncResult OnBeginRemoveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginRemoveUser(userID, callback, asyncState);
        }
        
        private object[] OnEndRemoveUser(System.IAsyncResult result) {
            bool retVal = this.EndRemoveUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveUserCompleted(object state) {
            if ((this.RemoveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserCompleted(this, new RemoveUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserAsync(int userID) {
            this.RemoveUserAsync(userID, null);
        }
        
        public void RemoveUserAsync(int userID, object userState) {
            if ((this.onBeginRemoveUserDelegate == null)) {
                this.onBeginRemoveUserDelegate = new BeginOperationDelegate(this.OnBeginRemoveUser);
            }
            if ((this.onEndRemoveUserDelegate == null)) {
                this.onEndRemoveUserDelegate = new EndOperationDelegate(this.OnEndRemoveUser);
            }
            if ((this.onRemoveUserCompletedDelegate == null)) {
                this.onRemoveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserDelegate, new object[] {
                        userID}, this.onEndRemoveUserDelegate, this.onRemoveUserCompletedDelegate, userState);
        }
        
        public NoteManagerUI.NoteManagerService.UserData UpdateUser(NoteManagerUI.NoteManagerService.UserData user) {
            return base.Channel.UpdateUser(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUser(NoteManagerUI.NoteManagerService.UserData user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NoteManagerUI.NoteManagerService.UserData EndUpdateUser(System.IAsyncResult result) {
            return base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NoteManagerUI.NoteManagerService.UserData user = ((NoteManagerUI.NoteManagerService.UserData)(inValues[0]));
            return this.BeginUpdateUser(user, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            NoteManagerUI.NoteManagerService.UserData retVal = this.EndUpdateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(NoteManagerUI.NoteManagerService.UserData user) {
            this.UpdateUserAsync(user, null);
        }
        
        public void UpdateUserAsync(NoteManagerUI.NoteManagerService.UserData user, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        user}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        public string Test() {
            return base.Channel.Test();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTest(System.IAsyncResult result) {
            return base.Channel.EndTest(result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTest(callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            string retVal = this.EndTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync() {
            this.TestAsync(null);
        }
        
        public void TestAsync(object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, null, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        public bool Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(email, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string email, string password) {
            this.LoginAsync(email, password, null);
        }
        
        public void LoginAsync(string email, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        email,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
    }
}
